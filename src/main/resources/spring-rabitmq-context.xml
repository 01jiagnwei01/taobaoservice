<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
	xmlns:rabbit="http://www.springframework.org/schema/rabbit"
	xmlns:int-stream="http://www.springframework.org/schema/integration/stream"
	xsi:schemaLocation="http://www.springframework.org/schema/integration/amqp http://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd
		http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/integration/stream http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd
		http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
<!-- 
参考网址：http://docs.spring.io/spring-integration/reference/htmlsingle/
		  http://docs.spring.io/spring-amqp/reference/htmlsingle/
		  http://docs.spring.io/spring-amqp/reference/html/amqp.html#amqp-template
	1)id : 适配器的ID,可选
	2)channel：消息将要发送到的通道，必选
	3)queue-names：消息队列的名字，从这个消息队列里获取将被消耗的消息
	4)acknowledge-mode：告之已接受模式，默认为AUTO，可选择范围为：AUTO，MANUAL，NONE
			当选择MANUAL时，传递标签和通道将在头部分别通过amqp_deliveryTag和amqp_channel指定。用户的应用可以确认消息已接受。
	5)advice-chain：外部AOP接口来处理与该 Inbound Channel Adapter有关的交叉切断行为
	6)channel-transacted:true或false.标识这个组件创建的通道将被事务化。如果是true,通知这个框架使用事务通道并且依赖结果使用提交或者回调函数结束所有的操作（发送或者接收）
					 使用异常来通知回调.可选的，默认是false.
	7)concurrent-consumers:指定并行生成消费者的数量，默认是1。为了提高消费来自消息队列的消息的能力建议增加并行消费者的数量。
			但是，一旦多个消费者被注册，所有的顺序保证将无法提供。一般低体积的队列坚持使用一个消费者。这个标签是可选的
	8)connection-factory：Bean reference to the RabbitMQ ConnectionFactory. Optional (Defaults to 'connectionFactory').
	9)error-channel： 错误消息将被送达的消息通道. Optional
	10)expose-listener-channel:这个监听通道((com.rabbitmq.client.Channel)是否被暴露给一个注册了的消息通道监听器。可选的，默认之时true.
	11) header-mapper:当接收AMQP消息时将被使用的AmqpHeaderMapper。可选的。默认只有标准的 AMQP属性（例如：contentType）将被拷贝到Spring Integration MessageHeaders
	任何用户在AMQP MessageProperties里自定义的headers将不被拷贝到Message，将使用默认的DefaultAmqpHeaderMapper。如果提供了request-header-names，该标签将不允许使用。
	12) mapped-request-headers：逗号分隔的AMQP Headers名称列表。将被从AMQP请求映射到MessageHeaders。这个标签只有在'header-mapper' 没有被指定时可以使用。
	列表里的名字可以是简的模式匹配header names (例如. "*" or "foo*, bar" or "*foo").
	13)listener-container:	引用SimpleMessageListenerContainer用来接收AMQP消息。如果配置了这个属性，那么其他关于监听器容器的配置的属性将不需要配置。
	因为这就是这个通道适配器实施的核心响应，相关的引用监听器容器不必已经有了他们自己的消息监听器配置。（可选的）
		注意，当配置外部容器时，不能使用Spring AMQP 命名空间定义容器。因为命名空间要求至少一个 <listener/> 元素。在这个环境下，监听器是这个适配器的内部内。因此，
	必须使用标准的<bean/>标签定义容器。例如：
 		<bean id="container"
		 class="org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer">
			<property name="connectionFactory" ref="connectionFactory" />
			<property name="queueNames" value="foo.queue" />
			<property name="defaultRequeueRejected" value="false"/>
		</bean>
	14)message-converter：消息转换器，接收消息时使用。可选的。
	15)message-properties-converter：消息属性转换器，接收消息时使用。可选的。
	16)phase:指定在哪一相中，潜在的SimpleMessageListenerContainer需要启动和关闭。启动顺序收益从低到高，关闭顺序是相反的。
	默认值是： Integer.MAX_VALUE ，意思是这个容器启动顺序尽可能的推迟，尽快关闭。可选的。
	17)prefetch-count:通知AMQP接收者一个请求多少个消息发送到每个消费者。通常这个可以设置的高点来改善吞吐量。他应该被设置的
	大于或等于事务大小(参考：tx-size)可选的，默认值是1 
	18)receive-timeout:接收消息超时记录，单位是毫秒。可选的，默认是1000
	19)recovery-interval:指定从等待态 的SimpleMessageListenerContainer恢复需要的时间间隔。单位是毫秒，可选的，默认值是5000。
	20)missing-queues-fatal:
			如果设置为true,并且在经纪人处一个队列也没有，在启动和关闭时 如果队列被删除，并且容器运行时，再做出3次尝试传递声明到这个队列时，
			这个容器将会抛出一个致命的异常
			如果设置为false,容器将不抛出异常，而是进入恢复模式，尝试着重启。按照revcovery-interval的配置。可选的。默认是true.
 	21)shutdown-timeout:当潜在的SimpleMessageListenerContainer被停止或在AMQP连接被强制关闭时，等待工作者的时间 ，单位是毫秒 。
 			如果当光比信号来到时所有的工作者是活跃的，只要他们能在超时时间内他们将被允许结束处理，否则连接将关闭，消息保持延迟确认（如果渠道是事务的）。
 			默认是5000毫秒，可选的。默认值是5000。
 	22)task-executor:默认潜在的SimpleMessageListenerContainer使用SimpleAsyncTaskExecutor来实现。SimpleAsyncTaskExecutor为每个任务启动一个新的线程
 	异步执行。默认情况下，并行的线程数是不限制的。注意，这个实现没有重用线程 。可以考虑一个线程持实现来做备选方法。可选的。默认值是：DefaultTransactionAttribute
 	23)transaction-attribute:默认情况下，潜在的SimpleMessageListenerContainer创建一个新的DefaultTransactionAttribute类实体对象。（运行时调用EJB方法来回滚，但是是没有checked的异常）
 	可选的，默认值是DefaultTransactionAttribute
 	24)transaction-manager:在SimpleMessageListenerContainer上设置一个外部的事务管理器 ，这个事务管理器结合"channel-transacted"属性一起生效。
 	如果已经存在一个事务，当框架发送或接收消息消息并且channelTransacted被设置成true ,那么提交或消息回滚事务将被递延，直到当前事务结束。如果channelTransacted被设置成
 	false那么没有事务将被应用到消息操作上，消息将自动被确认。可选的
 	25)tx-size: （如果通道是事务的）通知SimpleMessageListenerContainer 在一个事务中处理多少个消息，最好的设置方式是应该少于或等于prefetch-count。默认值是1 。可选的。
 	
 	 <int-amqp:inbound-channel-adapter
                                  id="inboundAmqp"
                                  channel="inboundChannel"  
                                  queue-names="si.test.queue"
                                  acknowledge-mode="AUTO"
                                  advice-chain=""
                                  channel-transacted=""
                                  concurrent-consumers=""
                                  connection-factory=""
                                  error-channel=""
                                  expose-listener-channel=""
                                  header-mapper=""
                                  mapped-request-headers=""
                                  listener-container=""
                                  message-converter=""
                                  message-properties-converter=""
                                  phase="" 
                                  prefetch-count="" 
                                  receive-timeout="" 
                                  recovery-interval="" 
                                  shutdown-timeout="" 
                                  task-executor="" 
                                  transaction-attribute="" 
                                  transaction-manager="" 
                                  tx-size="" />
 	
 
 -->

 <bean id="connectionFactory"  
        class="org.springframework.amqp.rabbit.connection.SingleConnectionFactory">  
        <constructor-arg value="localhost" />
        <!-- 
        <property name="username" value="guest" />  
        <property name="password" value="guest" />  
         -->  
    </bean>  
    <bean id="amqpAdmin"  
        class="org.springframework.amqp.rabbit.core.RabbitAdmin">  
        <constructor-arg ref="connectionFactory" />  
    </bean>  
    <bean id="rabbitTemplate"  
        class="org.springframework.amqp.rabbit.core.RabbitTemplate">  
        <constructor-arg ref="connectionFactory"></constructor-arg>  
    </bean>  
    
    
    <!-- 声明Queue并设定Queue的名称 -->  
    <bean id="helloWorldQueue"  
        class="org.springframework.amqp.core.Queue">  
        <constructor-arg value="hello.world.queue"></constructor-arg>  
    </bean> 
    <!-- 声明消息转换器为SimpleMessageConverter -->  
    <bean id="messageConverter"  
        class="org.springframework.amqp.support.converter.SimpleMessageConverter">  
    </bean> 
     <!-- 声明Exchange的类型为topic并设定Exchange的名称 -->  
    <bean id="hellotopic"  
        class="org.springframework.amqp.core.TopicExchange">  
        <constructor-arg value="hello.topic"></constructor-arg>  
    </bean>
    <!-- 声明Exchange的类型为direct并设定Exchange的名称 -->  
    <bean id="hellodirect"  
        class="org.springframework.amqp.core.DirectExchange">  
        <constructor-arg value="hello.direct"></constructor-arg>  
    </bean>
    <!-- 通过Binding来判定Queue、Exchange、routingKey -->  
    <!-- 其中构建Binding的参数1是Queue，参数2是Exchange，参数3是routingKey -->  
    <bean id="queuebling"  
        class="org.springframework.amqp.core.Binding">  
        <constructor-arg index="0" ref="helloWorldQueue"></constructor-arg>  
        <constructor-arg index="1" ref="hellotopic"></constructor-arg>  
        <constructor-arg index="2" value="hello.world.#"></constructor-arg>  
    </bean> 
    
    <!-- 监听生产者发送的消息开始 -->  
    <!-- 用于接收消息的处理类 -->  
    <bean id="helloWorldHandler"  
        class="com.gxkj.taobaoservice.amqps.MassageHandler">  
    </bean>  
    <!-- 用于消息的监听的代理类MessageListenerAdapter -->  
    <bean id="helloListenerAdapter"  
        class="org.springframework.amqp.rabbit.listener.adapter.MessageListenerAdapter">  
        <constructor-arg ref="helloWorldHandler" />  
        <property name="defaultListenerMethod" value="handleMessage"></property>  
        <property name="messageConverter" ref="messageConverter"></property>  
    </bean>  
    <!-- 用于消息的监听的容器类SimpleMessageListenerContainer，对于queueName的值一定要与定义的Queue的值相同 -->  
    <bean id="listenerContainer"  
        class="org.springframework.amqp.rabbit.listener.SimpleMessageListenerContainer">  
        <property name="queueName" value="hello.world.queue"></property>  
        <property name="connectionFactory" ref="connectionFactory"></property>  
        <property name="messageListener" ref="helloListenerAdapter"></property>  
    </bean>  
    <!-- 监听生产者发送的消息结束 --> 

 
</beans>