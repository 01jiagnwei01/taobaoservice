/**
 * http://groovy.codehaus.org/groovy-jdk/ 
 * http://groovy.codehaus.org/Process+Management
 * http://groovy.codehaus.org/Groosh
 * 
 * http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.Exec.html
 * http://www.gradle.org/docs/current/userguide/userguide_single.html#configure-by-dag
 * 
 * http://git-scm.com/book/zh/v1
 * http://git-scm.com/book/zh/v1/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6
 * http://www.infoq.com/cn/articles/Gradle-application-in-large-Java-projects/
 * gradle --stacktrace -b F:/taobaoservice/build.gradle war 
 */
import java.io.File;

import org.gradle.plugins.ide.eclipse.model.Facet
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'groovy'
//apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
//apply plugin: 'maven'

sourceCompatibility = 1.8
webAppDirName = 'WebContent'    // 设置 WebApp 根目录
[compileJava,compileTestJava,javadoc]*.options*.encoding = "UTF-8"
//tasks.withType(JavaCompile) { options.encoding = "UTF-8" }
repositories {
	mavenLocal()
	 mavenCentral() // 中央库
}

dependencies {
	
	//compile 'jstl:jstl:1.2'
	//groovy
	compile 'org.codehaus.groovy:groovy-all:2.3.7'
	
	compile 'log4j:log4j:1.2.17'
	 //springframework
	//compile 'org.springframework:spring-context-support:4.1.2.RELEASE'
	compile 'org.springframework:spring-webmvc:4.1.2.RELEASE'
	compile 'org.springframework:spring-tx:4.1.2.RELEASE'
	compile 'org.springframework:spring-aop:4.1.2.RELEASE'
	compile 'org.springframework.security:spring-security-web:3.2.5.RELEASE'
	compile 'org.springframework.security:spring-security-config:3.2.5.RELEASE'
	compile 'org.springframework:spring-jdbc:4.1.2.RELEASE'
	compile 'org.springframework.batch:spring-batch-core:3.0.2.RELEASE'
	compile 'org.springframework:spring-orm:4.1.2.RELEASE'
	compile 'org.springframework.amqp:spring-rabbit:1.4.1.RELEASE'
	compile 'org.springframework.amqp:spring-amqp:1.4.1.RELEASE'
	//compile 'org.springframework.integration:spring-integration-core:4.1.1.RELEASE'
	//
	compile 'com.googlecode.ehcache-spring-annotations:ehcache-spring-annotations:1.2.0'
	testCompile 'org.springframework:spring-test:4.1.2.RELEASE'
	testCompile 'org.glassfish:javax.el:3.0.0'
	compile 'org.springframework:spring-support:2.0.8'
	//compile 'org.springframework:spring-context-support:4.1.3.RELEASE'
	
	//jackson
	compile 'org.codehaus.jackson:jackson-mapper-lgpl:1.9.13'
	compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
	compile 'com.fasterxml.jackson.core:jackson-databind:2.4.3'
	compile 'com.fasterxml.jackson.core:jackson-core:2.4.3'
	//common
	compile 'commons-dbcp:commons-dbcp:1.4'
	compile 'org.apache.commons:commons-lang3:3.3.2'
	compile 'commons-fileupload:commons-fileupload:1.3.1'
	compile 'commons-io:commons-io:2.4';
	compile 'commons-codec:commons-codec:1.10';
	compile 'commons-logging:commons-logging:1.2';
	compile 'commons-beanutils:commons-beanutils:1.9.2'
	//aspect
	compile 'aspectj:aspectjweaver:1.5.4'
	//json-lib
	//compile 'net.sf.json-lib:json-lib:2.4'
	//compile 'net.sf.ezmorph:ezmorph:1.0.6'
	//activiti
	//compile 'org.activiti:activiti-spring:5.17.0'
	//compile 'org.activiti:activiti-engine:5.17.0'
	
	//jms
//	compile 'org.apache.activemq:activemq-core:5.7.0';
//	compile 'org.apache.activemq:activemq-pool:5.10.0';
//	compile 'org.apache.activemq:activemq-broker:5.10.0';
	
	//jersey
//	compile 'org.glassfish.jersey.core:jersey-client:2.15'
//	compile 'org.glassfish.jersey.core:jersey-common:2.15'
	
	
	compile 'org.springframework:spring-jms:4.1.4.RELEASE';
	//google
	compile 'com.google.code.gson:gson:2.3.1'
	compile 'com.google.protobuf:protobuf-java:2.6.1'
	//compile 'org.jdom:jdom:1.1.3';
	compile 'jdom:jdom:1.1';
	
	//hibernate
	compile 'org.hibernate:hibernate-core:4.3.7.Final'
	compile 'org.hibernate:hibernate-validator:5.1.3.Final'
	//compile 'org.hibernate:hibernate-annotations:3.5.6-Final'
	//compile 'org.hibernate:hibernate-commons-annotations:3.3.0.ga'
	//mysql12
	compile 'mysql:mysql-connector-java:5.1.34'
	//javamail
	compile 'javax.mail:mail:1.4.7'
	 
	compile 'javax.servlet:jstl:1.2'
	compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
	//providedCompile 'javax.servlet:servlet-api:2.5'
	providedCompile 'javax.servlet:javax.servlet-api:3.1.0'
	//providedRuntime 'javax.servlet:jstl:1.2'
	//testCompile group: 'junit', name: 'junit', version: '4.+'
	compile 'junit:junit:4.12'
	

	 compile 'org.slf4j:slf4j-jdk14:1.7.9'
	 compile 'org.slf4j:slf4j-api:1.7.9'
	 compile 'org.slf4j:slf4j-log4j12:1.7.9'
	 compile 'org.slf4j:slf4j-ext:1.7.9'
	 compile 'org.slf4j:jcl-over-slf4j:1.7.9'
	 
	 
	 
	 //apache
	 compile 'org.apache.poi:poi:3.11';
	 compile 'org.apache.poi:poi-examples:3.11'
	 
	 compile "org.apache.httpcomponents:httpclient:4.2.2"
	 compile 'org.apache.httpcomponents:httpcore:4.4';
	 
	 compile 'org.apache.activemq:activemq-all:5.10.0';
	 compile 'org.apache.activemq:activemq-ra:5.10.0';
	 compile 'org.apache.activemq:activemq-rar:5.10.0';
	 compile 'org.apache.activemq:activemq-broker:5.10.0';
	 //apache mina
	 compile 'org.apache.mina:mina-core:2.0.9'
	 compile 'org.apache.mina:mina-integration-jmx:2.0.9'
	 compile 'org.apache.mina:mina-filter-ssl:1.1.7'
	 //避免警告：sun.misc.BASE64Decoder 是 Sun 的专用
	 compile 'org.apache.maven.plugins:maven-compiler-plugin:3.2'
	 
	
	//自己系统jar
	compile fileTree(dir: 'libs', include: '*.jar')
	//compile files('jars/netpayclient.jar' )
	//system
	//compile files('spring-core.jar', 'spring-aap.jar')
	//compile fileTree(dir: 'deps', include: '*.jar')
}

test {
    systemProperties 'property': 'value'
}

uploadArchives {
//	repositories {
//		mavenDeployer {
//			repository(url: "file://D:/test/")
//		}
//	}
//	repositories {
//		flatDir {
//			version  '2.0'
//			dirs 'repos'
//		}
//	 }
 
}
 
//eclipse.classpath.defaultOutputDir=file("${project.projectDir}/src/main/webapp/WEB-INF/classes");
eclipse.classpath.defaultOutputDir=file("${project.projectDir}/WebContent/WEB-INF/classes");
eclipse {
	project {
		//增加tomcat插件,groovyNature属性
		natures += ['org.eclipse.wst.jsdt.core.jsNature' ,'com.sysdeo.eclipse.tomcat.tomcatnature']
		//natures += ['org.eclipse.jdt.groovy.core.groovyNature']
		buildCommand 'org.eclipse.wst.jsdt.core.javascriptValidator'
		buildCommand 'org.eclipse.jdt.core.javabuilder'
		buildCommand 'org.eclipse.wst.common.project.facet.core.builder'
		buildCommand 'org.eclipse.wst.validation.validationbuilder' 
	}
	wtp {
		component {
			//resource sourcePath: 'extra/resource', deployPath: 'deployment/resource'
			//property name: 'java-output-path', value: "/${project.name}/src/main/webapp/WEB-INF/classes"
			
		}
		facet {
			facet name: 'wst.jsdt.web', type: Facet.FacetType.fixed
			facet name: 'jst.web', type: Facet.FacetType.fixed
			facet name: 'java', type: Facet.FacetType.fixed
			facet name: 'java', version: '1.8'
			facet name: 'jst.web', version: '3.0'
			facet name: 'wst.jsdt.web', version: '1.0'
		}
		 
	}
	jdt {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
   
	}
}
/***/
//<classpathentry exported="true" kind="con" path="GROOVY_SUPPORT"/>
//<classpathentry exported="true" kind="con" path="GROOVY_DSL_SUPPORT"/>
eclipse.classpath.file.withXml {
		def node = it.asNode();
		//println "node.children().size1="+node.children().size();
		node.children().removeAll() { c ->
			//println  c.attribute("kind")+"  "+c.attribute("path");
			
			//return true;
			
		}
		println "node.children().size2="+node.children().size();
		//增加
		//<classpathentry exported="true" kind="con" path="GROOVY_SUPPORT"/>
		//<classpathentry exported="true" kind="con" path="GROOVY_DSL_SUPPORT"/>
		def groovy_map = ['exported':'true','kind':'con','path':'GROOVY_SUPPORT'];
		def GROOVY_SUPPORT_NODE = new Node(node, "classpathentry",groovy_map);
		
		def groovy_dsl_map = ['exported':'true','kind':'con','path':'GROOVY_DSL_SUPPORT'];
		def GROOVY_DSL_SUPPORT_node = new Node(node, "classpathentry",groovy_dsl_map);
		
		println "node.children().size="+node.children().size();
		
//		for (Node n : node.children()) {
//			if ("lib".equals(n.attribute("kind"))) {
//				def node_attributes = new Node(n, "attributes");
//				def map = new HashMap();
//				
//				map.put("name", "org.eclipse.jst.component.dependency");
//				map.put("value", "/WEB-INF/lib");
//				def node_attribute = new Node(node_attributes, "attribute", map);
//			}
//		}
	}
eclipse.classpath.file.beforeMerged  {classpath ->
	println classpath;
}

uploadArchives {
    repositories {
       flatDir {
           dirs 'repos'
       }
    }
}
/**
 println "1："+project.name
 println "2："+project.path
 println "3："+project.projectDir
 println "4："+project.buildDir
 println "5："+project.group
 def dest = "dest=="
 println "6：新定义变量为："+dest
 */
 //  getter method
 //	println project.buildDir
 //	println getProject().getBuildDir()
 //setter method
 //project.buildDir = 'target'
 //getProject().setBuildDir('target')
 //test.systemProperty('some.prop', 'value')
 
 //file($buildDir)
 //compileJava.destinationDir = file("$buildDir/output/classes")
 // 设置 Project Facets
 //println  "编译后的绝对路径"+file("$buildDir")
 
 /**
 task show << {
	 println relativePath(compileJava.destinationDir)
	 println relativePath(processResources.destinationDir)
 }
 sourceSets {
	 main {
		 java {
			 srcDir 'src/main/java'
		 }
		 resources {
			 srcDir 'src/main/resources'
		 }
	 }
 }
 println "java plugin  目录属性"
 println  "reportsDir:"+reportsDir
 println "testResultsDirName:"+testResultsDirName;
 
 
 println "testResultsDir:"+testResultsDir;
 println "testReportDirName:"+testReportDirName;
 println "testReportDir:"+testReportDir;
 println "libsDirName:"+libsDirName;
 println "libsDir:"+libsDir;
 println "distsDirName:"+distsDirName;
 println "distsDir:"+distsDir;
 println "docsDirName:"+docsDirName;
 println "docsDir:"+docsDir;
 
 println "dependencyCacheDirName:"+dependencyCacheDirName;
 println "dependencyCacheDir:"+dependencyCacheDir;
 
 println "sourceSets:"+sourceSets
 println "sourceCompatibility:"+sourceCompatibility
 println "targetCompatibility:"+targetCompatibility
 println "archivesBaseName:"+archivesBaseName
 
 println "sourceSets.main:"+sourceSets['main']
 sourceSets.all {
	 println name
 }
 println "sourceSets.main:"+sourceSets['main'].name
 println "sourceSets.main.output="+sourceSets['main'].output
 println "sourceSets.main.output.classesDir="+sourceSets.main.output.classesDir
 println "sourceSets.main.output.resourcesDir="+sourceSets.main.output.resourcesDir
 
 println "sourceSets.main.compileClasspath="+sourceSets.main.compileClasspath
 println "sourceSets.main.runtimeClasspath="+sourceSets.main.runtimeClasspath
 println "sourceSets.main.java="+sourceSets.main.java
 println "sourceSets.main.java.srcDirs="+sourceSets.main.java.srcDirs
 
 println "sourceSets.main.resources="+sourceSets.main.resources
 
 
 println "sourceSets.main.resources.srcDirs="+sourceSets.main.resources.srcDirs
 
 println "sourceSets.main.allJava="+sourceSets.main.allJava
 println "sourceSets.main.allSource="+sourceSets.main.allSource
 sourceSets {
	 intTest
 }
 dependencies {
	 intTestCompile 'junit:junit:4.11'
	 intTestRuntime 'org.ow2.asm:asm-all:4.0'
 }
 task intTestJar(type: Jar) {
	 println "sourceSets.intTest.output="+sourceSets.intTest.output
	 from sourceSets.intTest.output
 }
 
 
 println "webAppDirName:"+webAppDirName;
 println "webAppDir:"+webAppDir;
 
 println "eclipse.project.name="+eclipse.project.name;
 println "eclipse.project.comment ="+eclipse.project.comment ;
 println "eclipse.project.buildCommands="+eclipse.project.buildCommands;
 println "eclipse.project.file="+eclipse.project.file ;
 println "project.linkedResources="+eclipse.project.linkedResources ;
 println "eclipse.project.natures="+eclipse.project.natures ;
 
 println "eclipse.classpath.containers="+eclipse.classpath.containers ;
 println "eclipse.classpath.defaultOutputDir="+eclipse.classpath.defaultOutputDir ;
 println "eclipse.classpath.downloadJavadoc="+eclipse.classpath.downloadJavadoc ;
 println "eclipse.classpath.downloadSources="+eclipse.classpath.downloadSources ;
 println "eclipse.classpath.file="+eclipse.classpath.file ;
 
 println "eclipse.classpath.minusConfigurations="+eclipse.classpath.minusConfigurations ;
 println "eclipse.classpath.plusConfigurations="+eclipse.classpath.plusConfigurations ;
 
 println "eclipse.wtp.component.classesDeployPath="+eclipse.wtp.component.classesDeployPath ;
 println "eclipse.wtp.component.contextPath="+eclipse.wtp.component.contextPath;
 println "eclipse.wtp.component.deployName="+eclipse.wtp.component.deployName;
 println "eclipse.wtp.component.file="+eclipse.wtp.component.file;
 println "eclipse.wtp.component.libConfigurations="+eclipse.wtp.component.libConfigurations;
 println "eclipse.wtp.component.libDeployPath="+eclipse.wtp.component.libDeployPath;
 println "eclipse.wtp.component.minusConfigurations="+eclipse.wtp.component.minusConfigurations;
 println "eclipse.wtp.component.properties="+eclipse.wtp.component.properties;
 println "eclipse.wtp.component.resources="+eclipse.wtp.component.resources;
 println "eclipse.wtp.component.rootConfigurations="+eclipse.wtp.component.rootConfigurations;
 println "eclipse.wtp.component.sourceDirs="+eclipse.wtp.component.sourceDirs;
  */
task copyOne(type: Copy) {
	from 'src/main/test'
	into 'build/anotherDirectory'
}
task release(dependsOn: [build, uploadArchives]) << {
}
task snapshot(dependsOn: [build, uploadArchives]) << {
//	String target = '/release'
//	String targetDir = target + '/back'
//	exec {
//		commandLine 'scp','./build/libs/zoo-' + version + '.war',targetDir + 'zoo.war'
//	}
//	exec {
//		commandLine 'scp', './install.py', targetDir
//	}
//	exec {
//		commandLine 'ssh', target, 'wsadmin.sh -username wasadmin -password pwd
//-language jython -f zoo/install.py'
//	}
}


//task initProject(){
//	project.version = 5.0;
//	logging.captureStandardOutput LogLevel.LIFECYCLE //LogLevel.DEBUG,ERROR,INFO,LIFECYCLE,QUIET,WARN
//	println "initProject 执行完毕";
//}


//configurations.runtime.each { File f -> println f }
 
 






 

